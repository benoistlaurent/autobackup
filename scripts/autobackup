#!/usr/bin/env python3

"""Backup file and directories."""

import argparse
import configparser
import datetime
import subprocess
import logging
import os
import smtplib
import socket
import sys

from email.mime.text import MIMEText


__version__ = '1.0.0'
__executable__ = os.path.basename(sys.argv[0])


DEFAULT_CONFIG_FILE = os.path.join(sys.prefix, 'etc', 'autobackup.cfg')
DEFAULT_LOG_DIR = '/var/log/autobackup'


RSYNC_DEFAULT_FLAGS = ['-a', '-v', '--delete']


class RsyncCompletedProcess(subprocess.CompletedProcess):

    @property
    def stdout_str(self):
        return self.stdout.decode('utf-8')

    @property
    def stderr_str(self):
        return self.stderr.decode('utf-8')

    @classmethod
    def from_parent(cls, parent):
        return cls(parent.args, parent.returncode,
                   parent.stdout, parent.stderr)

    def has_errors(self):
        """Return True if rsync exited with errors (return status is not 0)."""
        return self.returncode != 0

    def has_no_space_left_error(self):
        """Return True if a no space left error was detected.
        Check if stderr contains 'No space left on device (28)' or
        'Result too large (34)'.
        """
        return (b'No space left on device (28)' in self.stderr or
                b'Result too large (34)' in self.stderr)

    def print_errors(self):
        out = "process standard output:\n{}".format(self.stdout_str)
        err = "process error output:\n{}".format(self.stderr_str)
        print(out, file=sys.stderr)
        print(err, file=sys.stderr)

    def assert_has_no_errors(self):
        """Raise an AssertionError return code is not 0."""
        if self.has_errors():
            err = 'rsync process had errors:\n' + self.stderr.decode('utf-8')
            raise AssertionError(err)


def rsync(source, dest, exe='rsync', flags=RSYNC_DEFAULT_FLAGS):
    """Run rsync.

    Args:
        source (str): path to source
        dest (str): path to destination
        exe (str): path to rsync executable
        flags (list[str]): flags to be passed to rsync

    Returns:
        RsyncCompletedProcess: rsync output data.
    """
    cmd = [exe] + flags + [source] + [dest]
    logging.debug("rsync command: {}".format(' '.join(cmd)))
    p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    logging.debug("rsync process complete")
    return RsyncCompletedProcess.from_parent(p)


def now(fmt='%y%m%d-%H%M%S'):
    """Return the date as a string in the format `fmt`.
    Args:
        fmt (str): date string format compatible with `datetime.strftime`.
    Returns:
        str: date as a string.
    """
    return datetime.datetime.today().strftime(fmt)


def read_config_file(path):
    logging.info("Reading configuration file {}".format(path))

    if not os.path.isfile(path):
        raise FileNotFoundError("No such file or directory: {}".format(path))

    config = configparser.ConfigParser()
    config.read(path)
    return config


def program_name():
    """Return the program name."""
    return os.path.basename(sys.argv[0])


def custom_logging(message):
    """Print a logging message on sys.stderr.

    This function is supposed to be used when logging has not been initialized.
    """
    message = '{}: {}'.format(program_name(), message)
    print(message, file=sys.stderr)


def init_logging():
    """Initialize logging parameters."""
    fmt = '%(asctime)s - %(levelname)-8s %(message)s'

    # Directory where log file will be written.
    logfiledir = DEFAULT_LOG_DIR

    # Create directory if necessary.
    if not os.path.isdir(logfiledir):
        msg = "Logging directory not found, creating {}".format(logfiledir)
        custom_logging(msg)
        os.mkdir(logfiledir)

    # Log files names are based on current date and time.
    logfile_debug = os.path.join(logfiledir, now() + '_backup-full.log')
    logfile_info = os.path.join(logfiledir, now() + '_backup.log')
    custom_logging("full log file to {}".format(logfile_debug))
    custom_logging("info log file to {}".format(logfile_info))

    # This logger will log at DEBUG level.
    logging.basicConfig(level=logging.DEBUG,
                        format=fmt,
                        filename=logfile_debug,
                        filemode='w')

    # This logger will log at INFO level.
    info_handler = logging.FileHandler(logfile_info)
    info_handler.setLevel(logging.INFO)
    formatter = logging.Formatter(fmt)
    info_handler.setFormatter(formatter)
    logging.getLogger('').addHandler(info_handler)

    return logfile_info, logfile_debug


def backup_from_config(section):
    """Backup from info stored in configuration file section.

    Returns:
        bool: success status
    """
    source = section['source']
    dest = section['dest']
    logging.info("backing up {} to {}".format(source, dest))

    result = rsync(source, dest)

    if result.has_errors():
        message = "error backing up {} to {}:\n{}".format(source, dest,
                                                          result.stderr_str)
        logging.error(message)
        return False

    logging.debug(result.stdout_str)
    logging.info("done, no error detected".format(source, dest))
    return True


def send_email(exp, to, content, subject='', server='localhost'):
    logging.debug("Sending an email from {}@{} to {}".format(exp, server, to))
    exp = '{}@{}'.format(exp, server)

    msg = MIMEText(content)
    msg['Subject'] = subject
    msg['From'] = exp
    msg['To'] = to

    s = smtplib.SMTP(server)
    s.send_message(msg)
    s.quit()


def send_report_email(to, logfile_info, logfile_debug):
    """Send the content of `logfile_info` to recipient.

    Returns:
        bool: success status
    """
    if not os.path.exists(logfile_info):
        raise FileNotFoundError("Log file not found: {}".format(logfile_info))
    
    with open(logfile_info, 'rt') as f:
        content = f.read()

    has_errors = 'ERROR' in content

    hostname = socket.gethostname()
    subject = '[backup@{}]: '.format(hostname)
    if has_errors:
        subject += 'ended with errors'
    else:
        subject += 'success'

    try:
        send_email(os.getlogin(),
                   to=to,
                   subject=subject,
                   server='localhost',
                   content=content)
    except Exception as e:
        logging.error("Report e-mail not sent: {}".format(e))
        return False

    logging.info("Report e-mail successfully sent to: {}".format(to))
    return True


def parse_command_line():    
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + __version__)
    parser.add_argument('-c', '--config', default=DEFAULT_CONFIG_FILE,
                        help='configuration file')
    return parser.parse_args()


def main():
    args = parse_command_line()

    logfile_info, logfile_debug = init_logging()
    logging.info("This is {} version {}".format(__executable__, __version__))
    logging.info("Start time: {}".format(now("%H:%M:%S")))
    logging.info("Log file: {}".format(logfile_info))
    logging.info("Full log file: {}".format(logfile_debug))

    # Read configuration file.
    config = read_config_file(args.config)

    # Actual backup procedure.
    nerrors = 0
    for i, name in enumerate(config.sections()):
        logging.info("----------------------------")

        success = backup_from_config(config[name])
        if not success:
            nerrors += 1

        if i == len(config.sections()) - 1:
            logging.info("----------------------------")

    if nerrors:
        logging.error("{} error{} occured during backup".format(nerrors,
                      's' if nerrors > 1 else ''))
    else:
        logging.info("Backup successful")

    # Send report via email (on failure only).
    if nerrors:
        send_report_email('benoist.laurent@gmail.com', logfile_info, logfile_debug)
        sys.exit(1)

    logging.info("End time: {}".format(now("%H:%M:%S")))


if __name__ == '__main__':
    main()
